###############################################################################
######                            DEPLOYMENTS                            ######
###############################################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: front-end-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: front-end
  template:
    metadata:
      labels:
        app: front-end
    spec:
      containers:
        - name: front-end-container
          image: fripiane/st2scl-frontend:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: 400Mi
              cpu: 500m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-end-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: back-end
  template:
    metadata:
      labels:
        app: back-end
    spec:
      containers:
        - name: back-end-container
          image: fripiane/st2scl-backend:latest
          imagePullPolicy: Always
          resources:
            limits:
              memory: 400Mi
              cpu: 500m
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15.2-alpine
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: todolist_db
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdb
          resources:
            limits:
              memory: 400Mi
              cpu: 500m
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
---
###############################################################################
######                              SERVICES                             ######
###############################################################################

apiVersion: v1
kind: Service
metadata:
  name: front-end-service
spec:
  ports:
    - name: http
      targetPort: 80
      port: 80
  type: NodePort
  selector:
    app: front-end
---
apiVersion: v1
kind: Service
metadata:
  name: back-end-service
spec:
  ports:
    - name: http
      targetPort: 8080
      port: 80
  type: NodePort
  selector:
    app: back-end
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
  selector:
    app: postgres
---
###############################################################################
######                               VOLUMES                             ######
###############################################################################

kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "data"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
###############################################################################
######                               SECRETS                             ######
###############################################################################

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: kubernetes.io/basic-auth
stringData:
  user: postgres
  password: root
---
###############################################################################
######                               INGRESS                             ######
###############################################################################

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: front-end-ingress
spec:
  rules:
    - host: front-end.localhost
      http:
        paths:
          - path: /
            pathType: Exact
            backend:
              service:
                name: front-end-service
                port:
                  number: 80
          - path: /v1/todos
            pathType: Prefix
            backend:
              service: back-end-service
              port:
                number: 80

